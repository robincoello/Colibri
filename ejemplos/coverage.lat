escribir("--------------------------------------------------------")
escribir("test coverage para variables")
escribir("--------------------------------------------------------")
l=cierto
escribir(l)
e=10
escribir(e)
d=1.5
escribir(d)
s="hola latino"
escribir(s)
s='ahora esta es una literal "hola latino"'
escribir(s)
PI=3.1416
escribir(PI)

escribir("--------------------------------------------------------")
escribir("test coverage para expresiones")
escribir("--------------------------------------------------------")
i = 1
d = 10.05

escribir("sumar---------------------------------------------------")
#entero + entero
escribir(i + i)  #a 1 se le suma 1 da como resultado 2

#entero + decimal
escribir(i + d) #a 1 se le suma 10.05 da como resultado 11.05

#decimal + entero
escribir(d + i) #da como resultado el decimal 11.05

#decimal + decimal
escribir(d + d) #da como resultado el decimal 20.1

escribir("restar--------------------------------------------------")
#entero - entero
escribir(i - (-1))  #a 1 se le resta -1 da como resultado 2

#entero - decimal
escribir(i - d) #a 1 se le suma 10.05 da como resultado -9.05

#decimal - entero
escribir(d - i) #da como resultado el decimal 9.05

#decimal - decimal
escribir(d - 0.05) #da como resultado el decimal 10

escribir("multiplicar---------------------------------------------")
#entero * entero
escribir(i * i) #da como resultado el decimal 1

#entero * decimal
escribir(i * d) #da como resultado el decimal 10.05

#decimal * entero
escribir(d * i) #da como resultado el decimal 10.05

#decimal * decimal
escribir(d * 0.5) #da como resultado el decimal 5.025

escribir("dividir-------------------------------------------------")
#entero / entero
escribir(i / i) #da como resultado el entero 1

#entero / decimal
escribir(i / d) #da como resultado el decimal 0.099502487562189

#decimal / entero
escribir(d / i) #da como resultado el entero 10

#decimal / decimal
escribir(d / 0.5) #da como resultado el decimal 20.1

escribir("modulo--------------------------------------------------")
#entero % entero
escribir(i % i) #da como resultado el entero 0

i = 21
#entero % decimal
escribir(i % d) #da como resultado el entero 1

escribir("--------------------------------------------------------")
escribir("test coverage para operadores de comparacion")
escribir("--------------------------------------------------------")
l = verdadero
e = 10
d = 3.14
lit = 'esto es una "literal"'
cad = "esto es una 'cadena'"
#comparador de negacion !
escribir("comparador de negacion !")
escribir("no falso: " . !falso)
#escribir(" no falso: " . !falso)
escribir("no verdadero: " . !verdadero)
#comparador de igualdad ==
escribir("comparador de igualdad ==")
escribir(l . " == falso: " . l == falso)
escribir(e . " == 10: " . e == 10)
escribir(d . " == 3.0: " . d == 3.0)
escribir(lit . " == 'hola': " . lit == 'hola')
escribir(cad . " == esto es una 'cadena': " . cad == "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador de desigualdad !=
escribir("comparador de desigualdad !=")
escribir(l . " != falso: " . l != falso)
escribir(e . " != 10: " . e != 10)
escribir(d . " != 3.0: " . d != 3.0)
escribir(lit . " != 'hola': " . lit != 'hola')
escribir(cad . " != esto es una 'cadena': " . cad != "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor que <
escribir("comparador menor que <")
escribir(e . " < 10: " . e < 10)
escribir(d . " < 3.0: " . d < 3.0)
escribir(lit . " < 'hola': " . lit < 'hola')
escribir(cad . " < esto es una 'cadena': " . cad < "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor que >
escribir("comparador mayor que >")
escribir(e . " > 10: " . e > 10)
escribir(d . " > 3.0: " . d > 3.0)
escribir(lit . " > 'hola': " . lit > 'hola')
escribir(cad . " > esto es una 'cadena': " . cad > "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador menor igual que <=
escribir("comparador menor igual que <=")
escribir(e . " <= 10: " . e <= 10)
escribir(d . " <= 3.0: " . d <= 3.0)
escribir(lit . " <= 'hola': " . lit <= 'hola')
escribir(cad . " <= esto es una 'cadena': " . cad <= "esto es una 'cadena'")
escribir("----------------------------------------------------------------")
#comparador mayor igual que >=
escribir("comparador mayor igual que >=")
escribir(e . " >= 10: " . e >= 10)
escribir(d . " >= 3.0: " . d >= 3.0)
escribir(lit . " >= 'hola': " . lit >= 'hola')
escribir(cad . " >= esto es una 'cadena': " . cad >= "esto es una 'cadena'")

escribir("--------------------------------------------------------")
escribir("test coverage para operadores logicos")
escribir("--------------------------------------------------------")
v = verdadero
f = falso
#&& y (and) logico
escribir("&& y (and) logico")
escribir("falso y falso: " . f && f)
escribir("verdadero y falso: " . v && f)
escribir("falso y verdadero: " . f && v)
escribir("verdadero y verdadero: " . v && v)

#|| o (or) logico
escribir("=============================")
escribir("|| o (or) logico")
escribir("falso o falso: " . f || f)
escribir("verdadero o falso: " . v || f)
escribir("falso o verdadero: " . f || v)
escribir("verdadero o verdadero: " . v || v)

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia si")
escribir("--------------------------------------------------------")
num = 10
si num < 0
    escribir("es negativo")
sino
    escribir("es positivo")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia elegir")
escribir("--------------------------------------------------------")
c = 'a'
## multiples casos con opcion defecto
elegir(c)
caso 'x':
    escribir("c vale x")
caso 'a':
    escribir("c vale a")
caso 'z':
    escribir("c vale z")
defecto:
    escribir("default")
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia mientras")
escribir("--------------------------------------------------------")
i = 0
mientras i < 10
    escribir(i)
    i++     #esto es lo mismo que i = i + 1
fin

escribir("tablas de multiplicar")
i=1
mientras i<=10
  j=1
  mientras j<=10
    escribir(i . " X " . j . " = " . i*j)
    j++
  fin
  i++
fin

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia hacer")
escribir("--------------------------------------------------------")
i = 0
hacer
    escribir(i)
    i++
cuando i < 10

escribir("--------------------------------------------------------")
escribir("test coverage para sentencia desde")
escribir("--------------------------------------------------------")
escribir("del 1 al 10:")
desde(i=1; i<=10; i++)
    escribir(i)
fin
escribir("escribir de dos en dos descendente")
desde(i=10; i>0; i=i-2)
    escribir(i)
fin

escribir("--------------------------------------------------------")
escribir("test coverage para funciones")
escribir("--------------------------------------------------------")
funcion promedio(a,b)
    retorno (a+b)/2
fin

funcion max(a,b)
    si (a > b)
        retorno a
    sino
        retorno b
    fin
fin

funcion min(a,b)
    si (a < b)
        retorno a
    sino
        retorno b
    fin
fin

escribir("promedio de 3 y 5: " . promedio(3, 5)) #4
escribir("maximo de 3 y 5: " . max(3, 5)) #5
escribir("minimo de 3 y 5: " . min(3, 5)) #3

escribir("--------------------------------------------------------")
escribir("test coverage para escritura / lectura de archivos")
escribir("--------------------------------------------------------")

s = "funcion sumatoria(a, b)
  retorno (a + b)
fin"
escribir_archivo("modulo.lat", s)

s = leer_archivo("modulo.lat")
escribir(s)

####################################################################
#test coverage para "incluir"
####################################################################
incluir("modulo")
r = sumatoria(2, 3)
escribir(r)

escribir("--------------------------------------------------------")
escribir("test coverage para listas")
escribir("--------------------------------------------------------")
#Crear una lista es tan sencillo como indicar entre corchetes y separados por comas
#los valores que queremos incluir en la lista.
numeros = [1, 2, 3, 4, 5]
vacia = []

#Podemos acceder a cada uno de los elementos de la lista escribiendo el nombre de
#la lista e indicando el índice del elemento entre corchetes.
#Ten en cuenta que el índice del primer elemento de la lista es 0:
escribir(numeros[1])
#salida: 2

#También podemos utilizar este operador para modificar un elemento de la lista si lo
#colocamos en la parte izquierda de una asignación:
numeros[0] = 99
escribir(numeros)
#salida:  [99, 2, 3, 4, 5]

#agrega un elemento a la lista
agregar(numeros, 6)
escribir(numeros)
#salida:  [99, 2, 3, 4, 5, 6]

#se valida que el valor este en el rango del numero de elementos
#escribir(numeros[-1])
#salida: Indice fuera de rango
#escribir(numeros[5])
#salida: Indice fuera de rango

#listas multiples
m = [[1,2,3],
     ['a', 'b', 'c'],
     ['alpha', 'beta', 'gamma']]

escribir(m)

lst = [123, 'xyz', 'zara', 'abc']
escribir("Lista inicial: " . lst)
lst->agregar(2009)  #agregar(aList, 2009)
agregar(lst, "ultimo elemento")
escribir("Lista actualizada: " . lst)
lst[0] = 321
escribir("Lista actualizada: " . lst)
escribir("Lista en 1: " . lst[1])
#escribir("Longitud: " . longitud(lst))
escribir("Longitud: " . lst->longitud())
list1 = [123, 'xyz']
list2 = ['456', 'abc']
list3 = [456, 'abc', 786]
list4 = ['123', 'xyz']
escribir(list1)
escribir(list2)
escribir(list3)
escribir(list4)
escribir(comparar(list1, list2))
escribir(list2->comparar(list1))
escribir(comparar(list2, list3))
escribir(comparar(list1, list4))
escribir(comparar(list1, [123, 'xyz']))
list1->extender(list2)
escribir(list1)
extender(list3, list4)
escribir(list3)
escribir(list3->indice(786))
list3->insertar("xxx", 0) #inicio
escribir(list3)
list3->insertar("zzz", 6) #fin
escribir(list3)
list3->insertar("yyy", 3) #en medio
escribir(list3)
list3->eliminar(786)
escribir(list3)
list3->eliminar('123')
escribir(list3)
list3->eliminar('aaa')
escribir(list3)
list3->eliminar_indice(0)
escribir(list3)
list3->eliminar_indice(4)
escribir(list3)
#list3->eliminar_indice(4)   #indice fuera de rango
list5 = list3->invertir()
escribir(list5)
escribir(comparar(['123', 'xyz'], [123, 'xyz']))
escribir(list1)
escribir(comparar(list1, [123, 'xyz']))

escribir("--------------------------------------------------------------------")
escribir("Ejemplo de matrices con listas")
escribir("--------------------------------------------------------------------")
m1 = [[1,2,3],
     [4,5,6],
     [7,8,9]]

m2 = [[9,8,7],
     [6,5,4],
     [3,2,1]]

escribir("Matriz m1: ")
escribir(m1)
escribir("Matriz m2: ")
escribir(m2)

escribir("Elemento m1[0]: " . m1[0])
escribir("Elemento m1[1][1]: " . m1[1][1])

m1[0] = [3, 2, 1]
escribir("Se cambia m1[0]: ")
escribir(m1)

m1[1][1] = 25
escribir("Se cambia m1[1][1]: ")
escribir(m1)

m1[0] = m2[1]
escribir("Se cambia m1[0]: ")
escribir(m1)

m1[1][1] = m2[1][1] * 100
escribir("Se cambia m1[1][1]: ")
escribir(m1)
escribir("m2 no se modifico: ")
escribir(m2)


escribir("--------------------------------------------------------------------")
escribir("Ejemplo de matrices multidimensionales")
escribir("--------------------------------------------------------------------")
mm = [[[1,2,3,7],
     [4,5,6,7],
     [7,8,9,7]],
     [[1,2,3,7],
     [4,5,7,7],
     [7,8,9,7]],
     [[1,2,3,7],
     [4,5,6,7],
     [7,8,9,7]]]

i = 0
j = 1
k = 2
escribir(mm)
escribir("mm en i:")
escribir(mm[i])
escribir("mm en i, j:")
escribir(mm[i][j])
escribir("mm en i, j ,k:")
escribir(mm[i][j][k])


escribir("--------------------------------------------------------------------")
escribir("Iterar sobre una lista / matriz")
escribir("--------------------------------------------------------------------")
desde (i=0; i < list1->longitud(); i++)
  escribir("lista en " . i . " es: " . list1[i])
fin

#Para recorrer una matriz se anidan dos ciclos desde
desde (i=0; i < longitud(m1); i++)  # longitud(m1) = 3 ya que es una lista que a su vez contiene 3 listas
  desde (j=0; j < m1[0]->longitud(); j++) #aqui tomamos la longitud del primer elemento es decir la lista interna
    escribir("lista en " . i . ", " . j . " es: " . m1[i][j])
  fin
fin

escribir("--------------------------------------------------------")
escribir("test coverage para diccionarios")
escribir("--------------------------------------------------------")
dic = { "Chilindrina": "Maria Antonieta de las Nieves",
     "El chavo del 8": "Roberto Gomez Bolaños",
     "Tres patines": "Leopoldo Fernandez" }

#mandamos a consola el diccionario o podemos obtener su representacion en cadena
str = dic->cadena()
escribir(str)

#cambiamos un elemento
dic["Chilindrina"] = "Maria Antonieta"
escribir("")
escribir(dic)

#cambiamos un elemento que no existe, "lo inserta"
dic["CH"] = "Chapulin Colorado"
escribir("")
escribir(dic)

dic["CH"] = "Chapulin C."
escribir(dic->CH)

#obtenemos la longitud del diccionario
escribir("Num de elementos: " . dic->longitud())

#ejemplo de request de la api de telegram
true = verdadero
false = falso
dic = {"ok":true,
       "result":[
          {"update_id":710556635,
            "message":{"message_id":130,
                       "from":{"id":269610735,"first_name":"Primitivo","last_name":"Roman"},
                       "chat":{"id":269610735,"first_name":"Primitivo","last_name":"Roman","type":"private"},
                       "date":1474906910,
                       "text":"esto es una prueba print (\"hola mundo\")",
                       "entities":[{"type":"code","offset":19,"length":20}]}}]}


#escribir(dic->ok)
#escribir(dic->result)
#escribir(dic->result[0])
#escribir(dic->result[0]->message)
escribir(dic->result[0]->message->text)

/*
#obtenemos el valor de un elemento que no existe
escribir("")
ch = dic["CH2"] #Error: Linea 25, 10: No se encontro la llave 'CH2' en el diccionario.
escribir(ch)
*/
