#Listas

Una lista es un tipo de colección. Sería equivalente a lo que en otros lenguajes
se conoce por arreglos o vectores.
Las listas pueden contener cualquier tipo de dato: logico, entero, decimal,
literal, cadena, listas, diccionarios, tipos definidos por el usuario (clases)

Crear una lista es tan sencillo como indicar entre corchetes y separados por comas
los valores que queremos incluir en la lista.

#declaracion de listas
numeros = [1, 2, 3, 4, 5]
vacia = []

Podemos acceder a cada uno de los elementos de la lista escribiendo el nombre de
la lista e indicando el índice del elemento entre corchetes.
Ten en cuenta que el índice del primer elemento de la lista es 0:

escribir(numeros[1])
#salida: 2

También podemos utilizar este operador para modificar un elemento de la lista si lo
colocamos en la parte izquierda de una asignación:

numeros[0] = 99
escribir(numeros)
#salida: [99, 2, 3, 4, 5]

Podemos utilizar también números negativos. Si se utiliza un número negativo
como índice, esto se traduce en que el índice empieza a contar desde el final,
hacia la izquierda; es decir, con [-1] accederíamos al último
elemento de la lista, con [-2] al penúltimo, con [-3], al antepenúltimo, y así sucesivamente.

escribir(numeros[-1])
#salida: 5

Se puede también hacer un particionado, y que consiste en ampliar este mecanismo
para permitir seleccionar porciones de la lista.
Si en lugar de un número escribimos dos números inicio y fin separados por
dos puntos (inicio:fin) se interpretará que queremos una lista que vaya desde la posición
 inicio a la posición fin, sin incluir este último.
Si escribimos tres números (inicio:fin:salto) en lugar de dos, el tercero se utiliza para
determinar cada cuantas posiciones añadir un elemento a la lista.

escribir(numeros[0:2])
#salida: [99, 2]

escribir(numeros[0:4:2]
#salida: [99, 3, 5]

Los números negativos también se pueden utilizar, con el mismo comportamiento que
se comentó anteriormente.

Hay que mencionar así mismo que no es necesario indicar el principio y el final
del particionamiento, sino que, si estos se omiten, se usarán por defecto las posiciones
de inicio y final de la lista respectivamente:

escribir(numeros[1:])
#salida: [2, 3, 4, 5]

escribir(numeros[:2])
#salida: [99, 2]

escribir(numeros[:])
#salida: [99, 2, 3, 4, 5]

escribir(numeros[::2])
#salida: [99, 3, 5]

También podemos utilizar este mecánismo para modificar la lista:

numeros[0:2] = [0, 1]
escribir(numeros)
#salida: [0, 1, 3, 4, 5]

pudiendo incluso modificar el tamaño de la lista si la lista de la parte derecha de la asignación
tiene un tamaño menor o mayor que el de la selección de la parte izquierda de la asignación:

numeros[0:2] = [verdadero]
#salida: [verdadero, 3, 4, 5]

Metodos
---
Los metodos para el manejo de las listas son los siguientes:

numeros = [1, 2, 3, 4, 5]

longitud: devuelve la cantidad de elementos en la lista.

escribir(numeros.longitud)
#salida: 5

agregar: agrega un elemento al final de la lista.

numeros.agregar(10)
escribir(numeros)
#salida: [1, 2, 3, 4, 5, 10]

insertar: inserta una elemento en una posición determinada, el primer parametro es la posición.

numeros.insertar(0, 8)
escribir(numeros)
#salida: [8, 1, 2, 3, 4, 5, 10]

numeros.insertar(2, 7)
escribir(numeros)
#salida: [8, 1, 7, 2, 3, 4, 5, 10]


extender: agrega todos los elementos de la lista dada

ol = [ "a", "b", "c"]
numeros.extender(ol)
escribir(numeros)
#salida: [8, 1, 7, 2, 3, 4, 5, 10, "a", "b", "c"]

eliminar: elimina una elemento de la lista si este existe

numeros.eliminar(3)
escribir(numeros)
#salida: [8, 1, 7, 2, 3, 4, 5, 10, "a", "b", "c"]

contar: cuenta el número de veces que una elemento se repite en la lista.

escribir(numeros.contar(7))
#salida: 1

ordenar: ordena los elementos de la lista.

numeros.ordenar()
#salida: [1, 2, 3, 4, 5, 7, 8, 10, "a", "b", "c"]

Se le puede indicar el orden con la palabra [orden=descendente]
numeros.ordenar(orden=descendente)
#salida: ["c", "b", "a", 10, 8, 7, 5, 4, 3, 2, 1]
